generator client {
  provider                 = "prisma-client-js"
  binaryTargets            = ["native", "linux-musl-openssl-3.0.x"]
  fieldNameMappingStrategy = "prismaCase"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["facilities", "reservations"]
}

model establishments {
  id          Int       @id @default(autoincrement())
  owner_id    String    @db.Uuid
  name        String    @db.VarChar(255)
  description String?
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(100)
  state       String?   @db.VarChar(100)
  zip_code    String?   @db.VarChar(20)
  tz          String    @default("Europe/Madrid")
  active      Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  units       units[]

  @@schema("facilities")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model slots {
  id                Int                @id @default(autoincrement())
  unit_id           Int
  day_of_week       Int
  open_time         DateTime           @db.Time(6)
  close_time        DateTime           @db.Time(6)
  active            Boolean            @default(true)
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  updated_at        DateTime?          @default(now()) @db.Timestamp(6)
  units             units              @relation(fields: [unit_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reservation_slots reservation_slots?

  @@schema("facilities")
}

model units {
  id               Int            @id @default(autoincrement())
  establishment_id Int
  name             String         @db.VarChar(255)
  type             String         @db.VarChar(100)
  surface_type     String?        @db.VarChar(100)
  indoor           Boolean?       @default(false)
  capacity         Int?
  active           Boolean        @default(true)
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  slots            slots[]
  establishments   establishments @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("facilities")
}

model reservation_slots {
  reservation_id Int
  slot_id        Int          @unique
  reservations   reservations @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  slots          slots        @relation(fields: [slot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([reservation_id, slot_id])
  @@schema("reservations")
}

model reservations {
  id                Int                 @id @default(autoincrement())
  user_id           String              @db.Uuid
  reservation_date  DateTime            @db.Date
  status            String              @default("CONFIRMED") @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  reservation_slots reservation_slots[]

  @@schema("reservations")
}
