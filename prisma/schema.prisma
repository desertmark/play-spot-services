generator client {
  provider                 = "prisma-client-js"
  binaryTargets            = ["native", "linux-musl-openssl-3.0.x"]
  fieldNameMappingStrategy = "prismaCase"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["facilities", "reservations"]
}

model establishments {
  id          Int       @id @default(autoincrement())
  ownerId     String    @db.Uuid
  name        String    @db.VarChar(255)
  description String?
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(100)
  state       String?   @db.VarChar(100)
  zipCode     String?   @db.VarChar(20)
  tz          String    @default("Europe/Madrid")
  active      Boolean   @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)
  units       units[]

  @@schema("facilities")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model slots {
  id               Int               @id @default(autoincrement())
  unitId           Int
  dayOfWeek        Int
  openTime         DateTime          @db.Time(6)
  closeTime        DateTime          @db.Time(6)
  active           Boolean           @default(true)
  createdAt        DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?         @default(now()) @db.Timestamp(6)
  units            units             @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reservationSlots reservationSlots?

  @@schema("facilities")
}

model units {
  id              Int            @id @default(autoincrement())
  establishmentId Int
  name            String         @db.VarChar(255)
  type            String         @db.VarChar(100)
  surfaceType     String?        @db.VarChar(100)
  indoor          Boolean?       @default(false)
  capacity        Int?
  active          Boolean        @default(true)
  createdAt       DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?      @default(now()) @db.Timestamp(6)
  slots           slots[]
  establishments  establishments @relation(fields: [establishmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("facilities")
}

model reservations {
  id               Int                @id @default(autoincrement())
  userId           String             @db.Uuid
  reservationDate  DateTime           @db.Date
  status           String             @default("CONFIRMED") @db.VarChar(20)
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?          @default(now()) @db.Timestamp(6)
  reservationSlots reservationSlots[]

  @@schema("reservations")
}

model reservationSlots {
  reservationId Int
  slotId        Int          @unique
  reservations  reservations @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  slots         slots        @relation(fields: [slotId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([reservationId, slotId])
  @@schema("reservations")
}
